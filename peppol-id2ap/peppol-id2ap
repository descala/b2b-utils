#!/usr/bin/env ruby 

# == Synopsis 
#   Given a Participant ID obtains its Access Point URL(s) 
#
# == Examples
#   peppol-id2url 9906:05359681003
#
# == Usage 
#   peppol-id2url [options] participant_id [document_id] [process_id]
#
#   For help use: peppol-id2url -h
#
# == Options
#   -h, --help          Displays help message
#   -v, --verbose       Show some additional output 
#
# == Author
#   Ingent Grup Systems SL

require 'optparse'
require 'ostruct'
require 'rdoc/usage'
require "peppol_destination"

class App
  VERSION = '0.1'

  attr_reader :options

  def initialize(arguments, stdin)
    @arguments = arguments
    @stdin = stdin
    @options = OpenStruct.new
    @options.verbose = false
  end
  
  def run
    if parsed_options? && arguments_valid? 
      process_arguments            
      process_command
    else
      output_usage
    end     
  end
  
  protected
  
  def parsed_options?
    # Specify options
    opts = OptionParser.new 
    opts.on('-v', '--verbose')    { @options.verbose = true }
    opts.on('-h', '--help')       { output_help }
    opts.parse!(@arguments) rescue return false
    true      
  end

  # True if required arguments were provided
  def arguments_valid?
    true if @arguments.length >= 1
  end
  
  # Setup the arguments
  def process_arguments
    @participant_id = @arguments[0]
    @document_id = @arguments[1]
    @process_id = @arguments[2]
  end
  
  def output_help
    output_version
    RDoc::usage()
  end
  
  def output_usage
    RDoc::usage('usage') # gets usage from comments above
  end
  
  def output_version
    puts "#{File.basename(__FILE__)} version #{VERSION}"
  end

  def process_command
    begin
      pd = PeppolDestination.new(@participant_id,@document_id,@process_id)
      pd.verbose = @options.verbose
      aps = pd.access_points
      puts "Can not find any matching AP" if aps.empty?
      aps.each do |ap|
        puts "AP = #{ap[:url]}"
        puts "     accepts document_id #{ap[:document_id]}" unless @document_id
        puts "     accepts process_id  #{ap[:process_id]} " unless @process_id
      end
    rescue Exception => e
      puts "Error: #{e.message}"
    end
  end
end


# Create and run the application
app = App.new(ARGV, STDIN)
app.run

